/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.examples.hello.pulsar;

import lombok.extern.slf4j.Slf4j;
import lombok.val;
import org.apache.pulsar.client.api.PulsarClient;
import org.apache.pulsar.client.api.PulsarClientException;
import org.apache.pulsar.client.impl.schema.AvroSchema;

import java.time.Instant;
import java.util.Optional;
import java.util.Random;

@Slf4j
public class App {
  private static boolean shuttingDown = false;

  private static final String PULSAR_HOST = getProp("PULSAR_HOST", "localhost");
  private static final String PULSAR_TOPIC = getProp("PULSAR_TOPIC", "conditions");
  private static final AppMode APP_MODE = AppMode.valueOf(getProp("APP_MODE", AppMode.function.toString()));

  public static void main(String[] args) throws PulsarClientException, InterruptedException {
    addShutdownHook();

    switch (APP_MODE) {
      case consumer:
        consume();
        break;
      case producer:
        produce();
        break;
      case function:
        break;
    }
  }

  private static void addShutdownHook() {
    Runtime.getRuntime().addShutdownHook(new Thread(() -> {
      try {
        Thread.sleep(200);
        System.out.println("Shutting down ...");
        shuttingDown = true;
      } catch (InterruptedException e) {
        Thread.currentThread().interrupt();
        e.printStackTrace();
      }
    }));
  }

  public static void consume() throws PulsarClientException {
    val client = createClient(PULSAR_HOST);
    val subscriptionName = getProp("PULSAR_SUBSCRIPTION_NAME", "my-java-sub");
    val consumer = client.newConsumer(AvroSchema.of(Condition.class))
      .topic(PULSAR_TOPIC)
      .subscriptionName(subscriptionName)
      .subscribe();

    while (!shuttingDown) {
      val msg = consumer.receive();
      try {
        val condition = msg.getValue();
        val ts = Instant.ofEpochMilli(msg.getPublishTime());
        val id = msg.getMessageId();
        val t = condition.getTemperature();
        val h = condition.getHumidity();
        log.info("Received msg(time={} id={}), condition(T={} H={})", ts, id, t, h);

        consumer.acknowledge(msg);
      } catch (Exception e) {
        log.error("Could not receive message", e);
        consumer.negativeAcknowledge(msg);
      }
    }
    client.close();
  }

  public static void produce() throws PulsarClientException, InterruptedException {
    val client = createClient(PULSAR_HOST);
    val producer = client.newProducer(AvroSchema.of(Condition.class))
      .topic(PULSAR_TOPIC)
      .create();
    val condition = new Condition();
    val rnd = new Random();
    val sleepMs = Integer.parseInt(getProp("PULSAR_INTERVAL_MS", "0"));
    while (!shuttingDown) {
      val t = rnd.nextFloat() * 40;
      val h = rnd.nextFloat() * 100;
      condition.setTemperature(t);
      condition.setHumidity(h);
      producer.send(condition);
      log.info("Sent condition(T={} H={})", t, h);
      if (sleepMs > 0)
        Thread.sleep(sleepMs);
    }
    client.close();
  }

  public static PulsarClient createClient(String pulsarHost) throws PulsarClientException {
    val serviceUrl = String.format("pulsar://%s:6650", pulsarHost);
    return PulsarClient.builder()
      .serviceUrl(serviceUrl)
      .build();
  }

  public static String getProp(String name, String defaultValue) {
    return Optional.ofNullable(System.getenv(name))
      .orElse(System.getProperty(name, defaultValue));
  }

  private enum AppMode {consumer, producer, function}
}

